import { expectTypeOf, test } from 'vitest'
import { specificDefaultOptionsKeys, specificFetchOptionsKeys } from './buildOptions.js'
import { DefaultOptions, FetchOptions } from './createFetcher.js'

type TupleToUnion<T extends readonly unknown[]> = T[number]

test('specific DefaultOptions Keys', () => {
   const _specificDefaultOptionsKeysAsUnionType = 'onError' as TupleToUnion<
      typeof specificDefaultOptionsKeys
   >
   type SpecificDefaultOptionsKeys = Exclude<keyof DefaultOptions, keyof FetchOptions>

   expectTypeOf(_specificDefaultOptionsKeysAsUnionType).toEqualTypeOf<SpecificDefaultOptionsKeys>()
})

test('specific Request Options Keys', () => {
   const _specificFetchOptionsKeysAsUnionType = 'body' as TupleToUnion<
      typeof specificFetchOptionsKeys
   >
   type SpecificFetchOptionsKeys = Exclude<keyof FetchOptions, keyof DefaultOptions>

   expectTypeOf(_specificFetchOptionsKeysAsUnionType).toEqualTypeOf<SpecificFetchOptionsKeys>()
})
